package leetcode.google;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreeLongestPathWithSameValue {

	public static void main(String[] args) {
		int[] A = {246,246,242,255,251,243,254,253,237,254,251,249,253,244,246,251,251,253,250,251,252,250,255,253,254,253,242,243,239,244,246,246,254,253,248,253,251,225,247,255,230,248,234,254,242,253,251,244,252,251,243,250,254,255,255,235,254,255,249,247,253,252,241,245,254,251,251,248,254,252,252,255,255,245,246,255,252,247,254,253,251,252,254,249,239,255,232,224,255,250,253,248,254,251,234,250,252,252,254,249,251,246,251,246,248,251,253,241,254,237,250,240,254,244,246,239,248,245,254,254,245,254,252,237,237,254,248,249,255,241,236,248,239,248,253,247,239,244,242,255,217,241,253,251,233,249,244,253,247,234,254,254,253,249,237,253,250,254,254,243,254,244,244,228,253,250,253,255,245,245,242,253,249,254,234,251,246,247,250,245,250,253,254,255,252,254,249,238,249,254,254,246,253,242,248,248,240,254,253,252,243,232,239,255,253,255,253,239,241,247,247,254,254,253,250,231,243,252,231,232,254,253,242,252,253,240,252,252,255,255,249,254,236,239,255,244,248,237,254,253,254,242,246,250,248,246,250,250,249,249,255,240,255,252,249,204,208,254,249,250,253,252,225,254,244,238,255,253,253,254,244,254,249,254,254,254,246,245,255,243,254,243,253,252,244,238,254,231,253,235,239,250,251,239,250,251,242,255,233,248,239,251,244,245,234,252,255,246,253,253,255,254,240,241,237,255,234,252,234,250,232,251,253,244,254,247,247,244,251,242,255,247,235,253,255,246,253,242,255,252,251,245,250,255,254,253,238,248,251,240,252,220,248,239,240,253,254,254,245,252,253,255,221,246,244,251,248,253,247,251,255,251,241,222,251,247,246,238,254,254,239,252,250,245,254,240,240,250,254,250,245,245,255,253,252,253,254,232,249,233,249,254,205,248,255,249,254,233,255,250,253,235,250,252,253,252,244,255,243,240,247,253,241,254,254,247,228,251,249,245,248,249,229,255,254,251,253,253,249,249,253,247,243,237,255,249,249,255,255,242,242,237,244,255,253,242,251,255,255,253,248,253,250,245,236,251,212,254,250,250,253,218,253,254,255,252,228,249,244,244,241,244,247,254,235,244,245,248,246,244,252,253,250,243,255,249,248,248,251,253,253,244,243,247,248,213,254,215,255,249,251,245,251,248,253,253,252,240,253,255,255,251,254,251,234,252,255,252,254,252,238,236,243,252,247,255,247,248,252,253,236,249,253,255,240,253,251,244,243,230,255,248,245,241,249,250,250,249,254,239,253,218,255,248,252,254,253,251,248,252,252,238,249,221,250,254,254,253,248,253,248,248,250,255,240,250,240,254,249,254,251,245,247,246,242,254,255,253,242,246,252,242,253,249,241,233,254,251,249,252,251,253,243,249,242,255,252,243,239,242,252,253,252,227,239,242,239,250,251,243,255,255,239,252,250,254,245,250,236,254,250,253,244,254,253,241,248,253,253,252,252,247,248,252,252,237,252,234,247,252,255,252,255,254,246,246,253,242,251,250,254,252,252,238,243,247,219,249,242,249,244,249,250,251,247,227,255,252,255,250,250,251,251,253,237,246,245,242,249,246,236,254,255,253,234,237,242,251,251,249,243,254,254,254,231,252,228,249,251,229,247,253,249,234,241,250,219,232,254,254,245,250,246,239,255,254,249,237,253,255,254,244,230,240,242,242,255,253,247,251,227,240,248,245,255,243,250,251,243,250,254,254,247,239,245,247,243,248,254,247,251,195,237,254,254,251,228,244,228,221,252,244,253,251,253,223,252,240,251,255,254,245,248,243,247,253,242,248,237,254,234,255,255,249,248,245,230,254,250,236,250,254,252,247,252,247,255,250,245,243,249,244,254,253,242,251,251,236,237,252,252,249,236,252,251,249,223,227,252,254,252,253,243,238,229,252,236,252,252,250,255,249,254,249,253,245,243,253,248,254,255,251,245,246,255,253,255,227,254,253,247,255,249,252,240,254,253,242,244,242,217,251,255,238,255,250,251,254,255,249,244,234,252,249,252,248,254,254,232,255,249,255,245,255,251,255,249,255,241,252,252,246,249,244,252,252,222,251,241,239,244,251,247,246,255,253,242,247,232,244,248,252,254,251,251,255,246,247,251,245,240,240,249,254,246,240,252,255,224,234,248,252,244,247,235,253,254,255,249,238,217,254,252,253,224,237,254,225,248,254,249,246,249,239,255,252,245,253,230,251,252,247,245,255,250,232,248,253,252,231,254,253,252,248,252,239,249,243,237,247};
		int[] E = {98,705,796,571,450,270,597,765,204,407,58,34,14,933,598,348,403,548,894,350,64,841,323,988,880,227,240,867,804,86,496,872,535,660,945,43,206,574,843,485,629,65,170,127,785,723,465,682,553,273,833,338,875,545,951,134,755,837,765,845,768,692,279,622,496,578,810,12,283,95,406,891,643,75,789,490,408,756,744,343,840,677,161,108,253,858,416,521,512,811,941,211,274,305,615,186,928,760,250,703,357,402,244,585,658,252,829,177,473,969,201,65,938,21,136,243,293,388,764,879,468,964,451,824,821,997,37,813,891,288,313,863,22,985,645,828,499,344,365,951,176,29,525,383,909,55,853,757,820,61,167,910,835,599,817,729,121,779,297,748,397,946,626,884,116,455,963,104,198,208,350,664,490,505,995,296,630,926,812,158,408,271,400,917,594,195,283,322,423,567,898,576,705,470,949,275,935,93,669,888,157,203,98,583,635,284,920,960,623,983,696,938,435,148,508,433,571,124,9,518,480,778,884,286,787,100,999,725,844,658,605,719,200,447,429,680,781,80,783,466,301,418,802,45,904,659,355,335,371,333,735,833,605,637,162,77,196,638,657,488,736,686,638,62,80,272,816,216,386,858,869,787,381,235,509,979,932,500,628,777,1000,722,785,373,958,846,514,470,572,714,792,743,191,932,453,569,282,228,852,797,282,280,62,757,874,237,412,883,216,565,540,583,967,859,339,290,657,492,457,538,510,893,689,497,802,783,319,790,17,965,608,102,693,637,737,811,786,229,949,121,27,573,579,773,806,477,643,720,772,308,536,109,688,898,727,263,697,461,819,391,39,882,382,973,774,314,779,562,234,235,226,883,634,840,333,838,218,436,75,911,149,553,929,66,490,749,905,590,169,245,811,287,936,960,605,156,165,40,648,643,19,501,24,274,843,825,901,960,577,269,458,560,391,215,183,363,63,394,303,41,83,314,539,197,897,502,458,248,704,168,339,411,396,534,48,665,191,428,469,51,189,205,734,962,964,393,895,661,36,978,416,710,226,550,170,799,711,390,872,678,205,342,610,404,771,590,51,830,992,791,381,364,675,489,57,836,318,924,436,291,668,572,517,832,462,49,454,136,748,989,939,143,712,194,309,990,394,306,460,724,962,135,654,728,488,777,105,376,715,781,32,833,821,115,324,403,582,187,110,580,885,99,335,342,866,340,786,685,246,71,973,968,609,497,976,258,367,374,1,709,239,29,689,193,738,308,126,101,265,573,173,532,283,615,475,565,36,141,171,133,854,134,763,718,811,160,181,443,751,804,30,596,933,265,70,453,775,603,682,970,752,620,728,135,549,353,867,481,478,323,398,4,955,346,126,631,529,474,855,178,541,839,992,965,860,616,783,276,183,280,429,590,316,307,969,9,296,664,699,645,662,93,502,256,99,14,570,555,927,809,657,120,650,962,190,204,9,270,44,907,446,1000,347,188,960,763,471,151,919,744,210,264,54,5,806,222,515,201,300,69,951,491,409,318,586,986,890,358,352,583,928,670,226,712,90,690,637,675,591,614,269,332,821,740,164,958,800,28,344,374,824,235,100,84,563,410,906,831,106,854,507,256,32,281,907,375,451,217,71,527,132,728,185,327,476,572,792,111,420,567,278,525,592,427,131,219,98,505,993,595,763,746,650,768,618,281,596,144,367,119,882,825,510,254,624,761,261,890,485,968,713,385,474,797,88,213,85,674,389,91,795,780,688,311,986,26,182,717,433,888,442,828,231,461,172,426,883,398,557,83,364,961,658,892,701,20,90,314,717,216,117,221,530,551,406,366,50,464,820,671,662,604,196,362,511,64,140,983,116,13,544,362,9,926,965,889,259,900,970,57,292,86,360,531,417,476,932,194,767,515,479,703,526,917,508,229,278,534,249,216,982,4,803,150,148,609,414,74,448,230,174,427,649,331,355,36,956,327,379,832,60,697,272,996,430,299,450,183,135,775,408,289,300,243,857,709,494,821,410,602,513,481,558,489,437,360,622,61,904,510,593,146,278,374,583,652,103,690,251,28,279,546,485,706,959,695,715,723,876,729,253,366,236,912,895,341,298,788,108,986,434,830,415,539,978,392,172,643,166,927,441,491,139,516,889,759,847,907,348,162,269,536,736,203,984,540,399,671,981,323,913,823,573,260,267,788,441,520,940,67,279,323,686,389,588,565,886,986,347,822,739,307,155,92,335,917,980,941,972,887,345,583,837,92,217,807,422,280,647,489,441,430,877,143,676,21,232,405,437,810,863,55,133,864,542,696,839,716,652,180,958,463,194,698,460,531,16,809,758,53,685,238,476,511,435,591,907,240,459,467,850,293,878,303,337,722,699,105,639,401,482,772,398,214,636,147,389,665,338,548,754,208,90,978,220,676,525,272,100,985,844,673,929,568,510,52,194,209,310,835,224,96,521,955,606,679,666,213,934,586,338,928,862,26,833,442,276,914,438,636,727,808,904,99,165,212,76,935,522,608,977,889,733,593,574,328,410,227,613,735,911,849,946,412,94,879,568,931,631,509,798,879,700,901,733,329,920,285,963,527,122,262,672,27,933,255,851,262,317,402,50,987,836,212,691,117,975,843,138,555,852,249,634,940,963,178,579,480,52,339,806,163,873,494,896,835,627,905,985,506,224,508,542,903,813,6,117,929,142,222,228,487,643,523,720,23,578,611,161,631,996,408,834,913,715,813,1000,403,202,205,880,250,305,231,203,154,843,853,721,419,49,843,70,434,619,293,137,785,383,472,361,446,611,974,551,823,853,702,858,902,125,855,991,299,171,219,614,739,140,139,492,440,43,319,29,121,38,538,796,270,59,475,15,77,860,270,832,981,899,504,459,919,555,737,128,486,924,999,413,835,852,3,545,256,445,426,30,10,357,405,209,212,42,323,309,913,174,942,751,187,430,244,888,173,663,878,586,257,597,782,585,556,549,261,207,802,102,943,211,562,540,92,710,493,54,383,247,694,258,79,129,668,275,617,277,944,801,509,531,564,998,503,900,135,914,499,339,25,736,195,100,175,239,632,597,543,79,328,843,812,394,784,236,33,119,170,6,34,254,333,673,706,657,514,741,907,362,46,513,552,519,329,500,431,826,540,770,726,561,516,520,937,165,633,552,378,449,59,336,800,522,644,96,753,810,26,573,388,223,763,767,704,855,218,536,418,476,978,140,596,758,320,118,974,906,389,930,483,702,718,953,241,818,913,845,711,941,956,448,380,987,112,498,369,282,504,725,747,870,584,372,966,390,231,85,134,922,161,452,908,190,738,425,344,865,713,421,784,842,452,708,371,6,8,503,378,817,340,313,225,443,532,176,346,605,257,439,925,782,111,918,594,478,912,696,335,542,409,616,641,347,376,839,456,367,957,878,269,184,989,822,210,104,884,174,703,16,395,487,587,537,268,206,323,182,18,688,732,835,572,858,388,610,492,744,752,68,364,992,701,687,528,554,584,530,815,992,39,952,310,542,993,103,827,681,491,716,192,100,971,707,397,503,555,916,355,785,146,78,341,400,699,267,897,274,369,138,612,731,394,145,887,566,99,112,950,124,679,385,745,870,162,408,330,415,368,388,177,887,672,455,87,779,687,430,588,868,404,444,536,575,413,295,874,424,973,815,336,877,97,857,316,691,731,32,484,295,580,653,24,440,680,468,6,11,279,325,431,39,249,724,334,861,130,774,439,245,632,718,377,230,199,432,793,331,516,923,294,533,850,86,414,201,349,123,34,188,82,442,166,353,896,69,524,780,189,45,840,152,492,455,983,387,304,59,438,34,309,340,895,448,597,168,549,814,189,447,136,580,197,72,402,356,104,67,153,171,646,990,351,484,769,742,223,705,35,812,126,81,633,255,7,457,333,916,985,277,345,576,842,389,106,21,601,617,581,607,716,387,253,564,750,527,537,782,451,884,514,493,953,312,546,418,273,200,326,642,649,81,130,930,808,663,948,954,655,617,221,51,871,321,462,947,951,338,357,107,221,880,222,536,384,305,469,563,502,143,79,597,615,930,48,78,872,94,63,287,721,406,660,789,667,792,56,315,969,769,762,302,414,534,589,288,651,225,363,873,755,132,746,995,74,711,730,554,994,47,7,262,362,547,110,113,131,675,559,266,572,881,90,940,2,684,978,528,966,539,656,958,996,888,678,745,83,640,230,159,18,169,214,921,241,657,683,319,493,856,865,819,725,994,471,778,576,625,241,794,992,502,984,382,269,10,954,494,119,813,237,245,128,519,567,608,111,643,629,913,832,773,762,391,467,876,633,798,187,488,53,88,864,823,90,441,959,995,848,482,193,242,262,188,456,805,430,825,696,644,270,179,832,296,113,222,600,73,361,247,17,305,432,550,89,233,87,248,586,70,621,112,417,167,491,300,944,635,168,46,359,781,766,114,61,512,988,578,758,585,624,142,504,354,607,726,845,140,776,104,370,19,786,407,666,250,923,989,678,538,358,915,617,495,172,853,754,959,859,93,938,540,331,150,579,53,162,31,623,639,472};

		System.out.println(LongestPathWithSameValue(A, E));
		System.out.println(LongestPathWithSameValue_LintCode(A, E));
	}

	/*
	 * We consider an undirected tree with N nodes, numbered from 1 to N,
	 * Additionally, each node also has a label attached to it and the label is
	 * an integer value. Note that different nodes can have identical labels.
	 * You need to write a function , that , given a zero-indexed array A of
	 * length N, where A[J] is the label value of the (J + 1)-th node in the
	 * tree, and a zero-indexed array E of length K = (N - 1) * 2 in which the
	 * edges of the tree are described (for every 0 <= j <= N -2 values E[2 * J]
	 * and E[2 * J + 1] represents and edge connecting node E[2 * J] with node
	 * E[2 * J + 1])， returns the length of the longest path such that all the
	 * nodes on that path have the same label. Then length of a path if defined
	 * as the number of edges in that path.
	 * 
	 * Notice Assume that: 1 <= N <= 1000
	 * 
	 * Example Give A = [1, 1, 1 ,2, 2] and E = [1, 2, 1, 3, 2, 4, 2, 5]
	 * described tree appears as follows:
	 * 	   1 （value = 1）
                 /   \
    (value = 1) 2     3 (value = 1)
               /  \
 (value = 2)  4     5 (value = 2)
	 * 
	 * and your function should return 2, because the longest path (in which all
	 * nodes have the save value of 1) is (2 -> 1 -> 3). The number of edges on
	 * this path is 2, thus, that is the answer.
	 * 
	 */
	static int res = 0;
	static int ans = 0;
    public static int LongestPathWithSameValue(int[] A, int[] E) {
        if (A == null || A.length == 0 || E == null || E.length == 0) return 0;
        Map<Integer, List<Integer>> map = new HashMap<>();
        // init map
        for (int i = 0; i < A.length - 1; i++) {
            List<Integer> list = map.getOrDefault(E[i * 2], new ArrayList<Integer>());
            list.add(E[i * 2 + 1]);
            map.put(E[i * 2], list);
        }
        
        // DFS to update res
        dfs(map, E[0], A);
        
        return res;
    }
    
    private static int dfs(Map<Integer, List<Integer>> map, int root, int[] A) {
    	// reach leaf, return 0
    	if (!map.containsKey(root)) return 0;
    	int max = 0;
    	int maxHere = 0;
    	for (int i : map.get(root)) {
    		// if the label is the same as the root
    		int l = dfs(map, i, A);
    		if (A[i - 1] == A[root - 1]) {
    			System.out.println("i == " + i + ", length = " + l);
    			max += l + 1;
    			maxHere = Math.max(maxHere, l + 1);
    		}
    	}
    	// update the max res
    	res = Math.max(res, max);
    	return maxHere;
    }
    
    public static int LongestPathWithSameValue_LintCode(int[] A, int[] E) {
        // write your code here
        int len = A.length;
        List<List<Integer>> ch = new ArrayList<>();
        for (int i = 0; i <= len; i++){
            ch.add(new ArrayList<>());
        }
        for (int i = 0; i < len - 1; i++){
            ch.get(E[i*2]).add(E[i*2+1]);
            ch.get(E[i*2+1]).add(E[i*2]);
        }
        int tmp = dfs(1,0,A,ch);
        ans = Math.max(ans,tmp);
        return ans - 1;
    }
    
    public static int dfs(int index,int father,int[] A,List<List<Integer>> ch){
        List<Integer> v = new ArrayList<>();
        for (int son: ch.get(index)){
            if (son != father){
                if (A[son - 1] == A[index - 1]){
                    v.add(dfs(son,index,A,ch));
                }
                else{
                    dfs(son,index,A,ch);
                }
            }
        }
        v.add(0);
        v.add(0);
        Collections.sort(v);
        Collections.reverse(v);
        ans = Math.max(ans,v.get(0)+v.get(1)+1);
        return v.get(0)+1;
    }
}
